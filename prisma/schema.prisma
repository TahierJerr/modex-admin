generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Store {
  id String @id @default(cuid())
  name String
  userId String
  billboards Billboard[] @relation("StoreToBillboard")
  orders Order[] @relation("StoreToOrder")
  users User[] @relation("StoreToUser")
  notifications Notifications[] @relation("StoreToNotifications")
  products Product[] @relation("StoreToProduct")
  categories Category[] @relation("StoreToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Billboard {
  id      String @id @default(uuid())
  storeId String
  store   Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label String
  description String
  imageUrl String
  categories Category[] @relation("BillboardToCategory")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToCategory", fields: [storeId], references: [id])

  name String
  description String?
  imageUrl String?

  billboardId String?
  billboard Billboard? @relation("BillboardToCategory", fields: [billboardId], references: [id])

  parentCategoryId String?
  parentCategory Category? @relation("CategoryToSubcategory", fields: [parentCategoryId], references: [id])
  subCategories Category[] @relation("CategoryToSubcategory")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([parentCategoryId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct", fields: [storeId], references: [id])

  name String
  description String?
  categoryId String?
  category Category? @relation(fields: [categoryId], references: [id])

  price Float?
  productUrl String?

  mainImage String
  images ImageProduct[]

  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)

  parentProductId String?
  parentProduct Product? @relation("ProductToSubProduct", fields: [parentProductId], references: [id])
  subProducts Product[] @relation("ProductToSubProduct")

  variants ProductVariant[]
  specifications ProductSpecification[]
  orderItems OrderItem[]

  stock Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
}

model ProductVariant {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])

  variantName String?
  price Float?
  stock Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ProductSpecification {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])

  key String?
  value String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ImageProduct {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id])

  url String
  alt String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELED
  RETURNED
}

model Order {
  id                    String       @id @default(uuid())
  storeId               String
  store                 Store        @relation("StoreToOrder", fields: [storeId], references: [id])
  userId                String?
  user                  User?        @relation("UserToOrder", fields: [userId], references: [id])
  orderItems            OrderItem[]
  phone                 String       @default("")
  address               String       @default("")
  city                  String       @default("")
  postalCode            String       @default("")
  country               String       @default("")
  email                 String       @default("")
  orderStatus           OrderStatus  @default(PENDING)
  paymentMethod         String       @default("")
  trackingNumber        String?
  totalPrice            Decimal
  discountCode          String?
  estimatedDeliveryDate DateTime?
  deliveryDate          DateTime?
  deliveryMethod        String?
  tax                   Decimal?
  netCost               Decimal?
  netProfit             Decimal?
  isPaid                Boolean      @default(false)
  rating                Int?
  feedback              String?

  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt

  @@index([orderStatus])
  @@index([storeId])
  @@index([userId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
}

model User {
  id        String    @id
  email     String    @unique
  firstName String
  lastName  String
  address   String   @default("")
  city      String   @default("")
  postalCode String  @default("")
  country   String   @default("")
  phone     String   @default("")
  newsletter Boolean  @default(false)
  store     Store @relation("StoreToUser", fields: [storeId], references: [id])
  storeId   String
  orders    Order[]   @relation("UserToOrder")

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

model Notifications {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToNotifications", fields: [storeId], references: [id])
  message String
  isRead Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}